 "id": "phase_5",
      "name": "Drivers and Add-ons",
      "duration_days": 21,
      "tasks": [
        {
          "id": "5.1",
          "name": "Convert Kernel Drivers",
          "type": "conversion",
          "priority": "high",
          "driver_categories": [
            {
              "category": "network",
              "path": "/src/add-ons/kernel/drivers/network",
              "subdirs": ["ethernet", "wlan", "wwan"],
              "template": "network_driver.cmake"
            },
            {
              "category": "graphics",
              "path": "/src/add-ons/kernel/drivers/graphics",
              "subdirs": ["intel_extreme", "radeon_hd", "nvidia"],
              "template": "graphics_driver.cmake"
            },
            {
              "category": "audio",
              "path": "/src/add-ons/kernel/drivers/audio",
              "subdirs": ["hda", "usb_audio", "ac97"],
              "template": "audio_driver.cmake"
            },
            {
              "category": "input",
              "path": "/src/add-ons/kernel/drivers/input",
              "subdirs": ["usb_hid", "ps2", "wacom"],
              "template": "input_driver.cmake"
            },
            {
              "category": "disk",
              "path": "/src/add-ons/kernel/drivers/disk",
              "subdirs": ["scsi", "usb", "nvme", "virtual"],
              "template": "disk_driver.cmake"
            },
            {
              "category": "bus",
              "path": "/src/add-ons/kernel/drivers/bus",
              "subdirs": ["usb", "pci", "acpi"],
              "template": "bus_driver.cmake"
            }
          ],
          "automation_script": "/build/cmake/tools/convert_drivers.py"
        },
        {
          "id": "5.2",
          "name": "Convert File Systems",
          "type": "conversion",
          "priority": "high",
          "filesystems": [
            {
              "name": "bfs",
              "source": "/src/add-ons/kernel/file_systems/bfs/Jamfile",
              "target": "/src/add-ons/kernel/file_systems/bfs/CMakeLists.txt"
            },
            {
              "name": "ext2",
              "source": "/src/add-ons/kernel/file_systems/ext2/Jamfile",
              "target": "/src/add-ons/kernel/file_systems/ext2/CMakeLists.txt"
            },
            {
              "name": "fat",
              "source": "/src/add-ons/kernel/file_systems/fat/Jamfile",
              "target": "/src/add-ons/kernel/file_systems/fat/CMakeLists.txt"
            },
            {
              "name": "ntfs",
              "source": "/src/add-ons/kernel/file_systems/ntfs/Jamfile",
              "target": "/src/add-ons/kernel/file_systems/ntfs/CMakeLists.txt"
            },
            {
              "name": "packagefs",
              "source": "/src/add-ons/kernel/file_systems/packagefs/Jamfile",
              "target": "/src/add-ons/kernel/file_systems/packagefs/CMakeLists.txt"
            }
          ]
        },
        {
          "id": "5.3",
          "name": "Convert Accelerants",
          "type": "conversion",
          "priority": "medium",
          "path": "/src/add-ons/accelerants",
          "accelerants": [
            "intel_extreme",
            "radeon_hd",
            "nvidia",
            "vesa",
            "framebuffer"
          ]
        },
        {
          "id": "5.4",
          "name": "Convert Translators",
          "type": "conversion",
          "priority": "medium",
          "path": "/src/add-ons/translators",
          "translators": [
            "bmp",
            "gif",
            "jpeg",
            "jpeg2000",
            "png",
            "tiff",
            "webp",
            "raw",
            "svg",
            "stxt",
            "rtf"
          ]
        },
        {
          "id": "5.5",
          "name": "Convert Media Add-ons",
          "type": "conversion",
          "priority": "medium",
          "categories": [
            {
              "type": "codecs",
              "path": "/src/add-ons/media/media-add-ons/codecs"
            },
            {
              "type": "readers",
              "path": "/src/add-ons/media/media-add-ons/readers"
            },
            {
              "type": "writers",
              "path": "/src/add-ons/media/media-add-ons/writers"
            }
          ]
        },
        {
          "id": "5.6",
          "name": "Convert Input Server Add-ons",
          "type": "conversion",
          "priority": "medium",
          "categories": [
            {
              "type": "devices",
              "path": "/src/add-ons/input_server/devices"
            },
            {
              "type": "filters",
              "path": "/src/add-ons/input_server/filters"
            },
            {
              "type": "methods",
              "path": "/src/add-ons/input_server/methods"
            }
          ]
        }
      ]
    },
    {
      "id": "phase_6",
      "name": "Applications",
      "duration_days": 14,
      "tasks": [
        {
          "id": "6.1",
          "name": "Convert Core Applications",
          "type": "conversion",
          "priority": "high",
          "applications": [
            {
              "name": "Tracker",
              "source": "/src/apps/tracker/Jamfile",
              "target": "/src/apps/tracker/CMakeLists.txt",
              "resources": {
                "rdef_files": ["Tracker.rdef", "Icons.rdef"],
                "signature": "application/x-vnd.Be-TRAK",
                "vector_icons": ["tracker_icon.hvif"],
                "attributes": {
                  "BEOS:APP_VERSION": "1.0.0",
                  "BEOS:TYPE": "application/x-vnd.Be-TRAK"
                },
                "file_types": ["application/x-vnd.Be-directory"]
              },
              "dependencies": ["libbe", "libtracker"]
            },
            {
              "name": "Deskbar",
              "source": "/src/apps/deskbar/Jamfile",
              "target": "/src/apps/deskbar/CMakeLists.txt",
              "resources": {
                "rdef_files": ["Deskbar.rdef"],
                "signature": "application/x-vnd.Be-TSKB",
                "app_flags": "B_SINGLE_LAUNCH | B_BACKGROUND_APP",
                "icons": ["deskbar_icon.hvif"]
              },
              "dependencies": ["libbe"]
            },
            {
              "name": "Terminal",
              "source": "/src/apps/terminal/Jamfile",
              "target": "/src/apps/terminal/CMakeLists.txt",
              "resources": {
                "rdef_files": ["Terminal.rdef"],
                "signature": "application/x-vnd.Haiku-Terminal",
                "file_types": ["text/plain", "text/x-shellscript"],
                "icons": ["terminal_icon.hvif"]
              },
              "dependencies": ["libbe", "libncurses"]
            },
            {
              "name": "WebPositive",
              "source": "/src/apps/webpositive/Jamfile",
              "target": "/src/apps/webpositive/CMakeLists.txt",
              "resources": {
                "rdef_files": ["WebPositive.rdef"],
                "signature": "application/x-vnd.Haiku-WebPositive",
                "file_types": ["text/html", "application/xhtml+xml"],
                "icons": ["webpositive_icon.hvif"],
                "localization": true
              },
              "dependencies": ["libbe", "libwebkit"],
              "complex": true
            },
            {
              "name": "ShowImage",
              "source": "/src/apps/showimage/Jamfile",
              "target": "/src/apps/showimage/CMakeLists.txt",
              "resources": {
                "rdef_files": ["ShowImage.rdef"],
                "signature": "application/x-vnd.Haiku-ShowImage",
                "file_types": [
                  "image/jpeg",
                  "image/png",
                  "image/gif",
                  "image/bmp",
                  "image/tiff",
                  "image/svg+xml"
                ],
                "icons": ["showimage_icon.hvif"]
              },
              "dependencies": ["libbe", "libtranslation"]
            },
            {
              "name": "Installer",
              "source": "/src/apps/installer/Jamfile",
              "target": "/src/apps/installer/CMakeLists.txt",
              "resources": {
                "rdef_files": ["Installer.rdef"],
                "signature": "application/x-vnd.Haiku-Installer",
                "app_flags": "B_SINGLE_LAUNCH",
                "icons": ["installer_icon.hvif"]
              },
              "dependencies": ["libbe"]
            },
            {
              "name": "HaikuDepot",
              "source": "/src/apps/haikudepot/Jamfile",
              "target": "/src/apps/haikudepot/CMakeLists.txt",
              "resources": {
                "rdef_files": ["HaikuDepot.rdef"],
                "signature": "application/x-vnd.Haiku-HaikuDepot",
                "file_types": ["application/x-vnd.haiku-package"],
                "icons": ["haikudepot_icon.hvif"],
                "localization": true
              },
              "dependencies": ["libbe", "libpackage"]
            },
            {
              "name": "Debugger",
              "source": "/src/apps/debugger/Jamfile",
              "target": "/src/apps/debugger/CMakeLists.txt",
              "resources": {
                "rdef_files": ["Debugger.rdef"],
                "signature": "application/x-vnd.Haiku-Debugger",
                "file_types": ["application/x-vnd.Be-elfexecutable"],
                "icons": ["debugger_icon.hvif"]
              },
              "dependencies": ["libbe", "libdebug", "libdwarf"],
              "complex": true
            }
          ]
        },
        {
          "id": "6.2",
          "name": "Convert Preferences",
          "type": "conversion",
          "priority": "medium",
          "path": "/src/preferences",
          "preferences": [
            "appearance",
            "backgrounds",
            "bluetooth",
            "datatranslations",
            "deskbar",
            "filetypes",
            "fonts",
            "input",
            "keyboard",
            "keymap",
            "locale",
            "mail",
            "media",
            "mouse",
            "network",
            "notifications",
            "printers",
            "screen",
            "screensaver",
            "shortcuts",
            "sounds",
            "time",
            "touchpad",
            "tracker",
            "virtualmemory"
          ],
          "template": "preference_app.cmake"
        },
        {
          "id": "6.3",
          "name": "Convert Command Line Tools",
          "type": "conversion",
          "priority": "medium",
          "path": "/src/bin",
          "categories": [
            {
              "type": "system_tools",
              "tools": ["package", "pkgman", "rc", "resattr", "mimeset", "setmime"]
            },
            {
              "type": "unix_tools",
              "tools": ["bash", "coreutils", "findutils", "grep", "sed", "awk"]
            },
            {
              "type": "network_tools",
              "tools": ["ifconfig", "route", "ping", "traceroute", "netstat"]
            }
          ]
        }
      ]
    },
    {
      "id": "phase_7",
      "name": "Package System and Bootstrap",
      "duration_days": 14,
      "tasks": [
        {
          "id": "7.1",
          "name": "Implement Package Building",
          "type": "implementation",
          "priority": "critical",
          "components": [
            {
              "name": "package_definitions",
              "convert_from": "/build/jam/packages/*.jam",
              "convert_to": "/build/cmake/packages/*.cmake"
            },
            {
              "name": "package_info_generator",
              "script": "/build/cmake/tools/generate_package_info.py"
            },
            {
              "name": "hpkg_builder",
              "integration": "/src/bin/package"
            }
          ]
        },
        {
          "id": "7.2",
          "name": "Implement Bootstrap Process",
          "type": "implementation",
          "priority": "critical",
          "stages": [
            {
              "stage": 0,
              "name": "buildtools_preparation",
              "description": "Build cross-compiler from buildtools repo",
              "script": "/build/cmake/bootstrap/stage0_buildtools.cmake",
              "steps": [
                "Clone buildtools repository",
                "Apply any additional patches",
                "Build gcc with Haiku patches",
                "Build binutils with Haiku support",
                "Install to cross-tools directory"
              ],
              "validation": [
                "Verify gcc has __HAIKU__ support",
                "Check binutils recognizes Haiku ELF",
                "Test simple cross-compilation"
              ]
            },
            {
              "stage": 1,
              "name": "cross_compiler",
              "script": "/build/cmake/bootstrap/stage1_cross_compiler.cmake",
              "buildtools": true,
              "dependencies": ["stage0_complete"]
            },
            {
              "stage": 2,
              "name": "minimal_haiku",
              "script": "/build/cmake/bootstrap/stage2_minimal.cmake",
              "components": ["kernel", "libroot", "runtime_loader"],
              "uses_buildtools": true
            },
            {
              "stage": 3,
              "name": "full_system",
              "script": "/build/cmake/bootstrap/stage3_full.cmake",
              "components": "all"
            }
          ]
        },
        {
          "id": "7.3",
          "name": "Repository Management",
          "type": "implementation",
          "priority": "high",
          "components": [
            {
              "name": "repository_info",
              "path": "/build/cmake/repositories/repo.info.cmake"
            },
            {
              "name": "package_repository",
              "path": "/build/cmake/repositories/package_repo.cmake"
            },
            {
              "name": "haikuports_integration",
              "script": "/build/cmake/tools/haikuports_sync.py",
              "validation": {
                "recipe_compatibility": {
                  "description": "Check recipes for Jam-specific macros",
                  "script": "/build/cmake/tools/check_recipe_compatibility.py",
                  "checks": [
                    "scan for jam-specific commands",
                    "validate BUILD() and INSTALL() functions",
                    "check for hardcoded paths",
                    "verify PATCHES() compatibility"
                  ]
                },
                "test_recipes": [
                  "gcc",
                  "python",
                  "git",
                  "cmake",
                  "mesa",
                  "ffmpeg",
                  "qt6"
                ],
                "migration_strategy": {
                  "phase1": "Keep HaikuPorts on Jam initially",
                  "phase2": "Create CMake wrapper for recipe builds",
                  "phase3": "Migrate recipes to CMake-aware format"
                }
              },
              "jam_direct_calls": {
                "description": "Many recipes call Jam directly in BUILD()",
                "problem_patterns": [
                  "jam -q",
                  "jam -q -j$jobs",
                  "jam install",
                  "SubInclude",
                  "UseHeaders",
                  "LinkAgainst"
                ],
                "analysis_script": "/build/cmake/tools/analyze_recipe_jam_usage.py",
                "jam_shim": {
                  "description": "Complete Jam to CMake shim implementation",
                  "install_path": "/bin/jam",
                  "backup_original": "/bin/jam.real",
                  "script": "/build/cmake/tools/jam_shim.sh",
                  "features": [
                    "Detects CMakeLists.txt and redirects to cmake",
                    "Falls back to real jam for unconverted projects",
                    "Maps jam targets to cmake targets",
                    "Handles common jam flags (-j, -q, -s)",
                    "Auto-converts simple Jamfiles on the fly"
                  ],
                  "implementation": "See jam_shim.sh in golden_reference_test.py",
                  "installation": [
                    "# Install shim system-wide",
                    "sudo mv /bin/jam /bin/jam.real",
                    "sudo cp /build/cmake/tools/jam_shim.sh /bin/jam",
                    "sudo chmod +x /bin/jam",
                    "",
                    "# Test shim",
                    "jam --version  # Should show shim message",
                    "cd /path/to/cmake/project",
                    "jam -q -j8  # Should run cmake --build"
                  ]
                },
                "recipe_adapter": {
                  "description": "Automatically adapt HaikuPorts recipes",
                  "script": "/build/cmake/tools/recipe_adapter.py",
                  "features": [
                    "Modifies BUILD() function in recipes",
                    "Replaces jam calls with cmake equivalents",
                    "Adds cmd:cmake to BUILD_REQUIRES",
                    "Creates backup of original recipe",
                    "Handles common patterns"
                  ],
                  "usage": [
                    "# Adapt single recipe",
                    "python3 recipe_adapter.py package.recipe",
                    "",
                    "# Batch adapt recipes",
                    "find /path/to/haikuports -name '*.recipe' -exec python3 recipe_adapter.py {} \\;"
                  ],
                  "conversion_map": [
                    {"from": "jam -q -j$jobs", "to": "cmake --build build -j$jobs"},
                    {"from": "jam install", "to": "cmake --build build --target install"},
                    {"from": "runConfigure ./configure --use-jam", "to": "cmake -B build -S ."},
                    {"from": "make JAM=jam", "to": "cmake --build build"}
                  ]
                },
                "testing_strategy": {
                  "phase1": "Test shim with simple recipes",
                  "phase2": "Test with complex recipes (gcc, qt)",
                  "phase3": "Full HaikuPorts build test",
                  "validation": [
                    "Compare package contents (jam vs cmake)",
                    "Verify binary functionality",
                    "Check dependencies are correct",
                    "Test package installation"
                  ]
                },
                "rollback_plan": {
                  "description": "How to rollback if shim causes issues",
                  "steps": [
                    "sudo mv /bin/jam.real /bin/jam",
                    "Restore original recipes from .bak files",
                    "Document which recipes failed",
                    "Fix issues and retry"
                  ]
                },
                "high_priority_recipes": {
                  "description": "Recipes that must work with CMake build",
                  "critical": [
                    "gcc",
                    "binutils",
                    "make",
                    "cmake",
                    "python",
                    "perl"
                  ],
                  "important": [
                    "git",
                    "openssh",
                    "curl",
                    "mesa",
                    "ffmpeg",
                    "qt6",
                    "boost"
                  ],
                  "testing_order": [
                    "First test with simple recipes (file, which)",
                    "Then core tools (make, cmake)",
                    "Then complex recipes (gcc, qt6)"
                  ]
                },
                "validation": {
                  "package_comparison": {
                    "description": "Compare packages built with Jam vs CMake",
                    "script": "/build/cmake/validation/compare_hpkg.py",
                    "checks": [
                      "file list comparison",
                      "binary size comparison",
                      "symbol export validation",
                      "dependency comparison"
                    ]
                  },
                  "recipe_test_suite": {
                    "path": "/build/cmake/tests/recipe_tests/",
                    "tests": [
                      "build_with_jam_shim",
                      "package_creation",
                      "dependency_resolution",
                      "installation_test"
                    ]
                  }
                }
              }
            }
          ]
        }
      ]
    },
    {
      "id": "phase_8",
      "name": "Image Building and Testing",
      "duration_days": 14,
      "tasks": [
        {
          "id": "8.1",
          "name": "Implement Image Building",
          "type": "implementation",
          "priority": "critical",
          "components": [
            {
              "name": "haiku_image",
              "script": "/build/cmake/image/build_haiku_image.cmake",
              "types": ["iso", "anyboot", "raw", "vmdk"]
            },
            {
              "name": "boot_sector",
              "script": "/build/cmake/image/install_boot_sector.cmake"
            },
            {
              "name": "package_activation",
              "script": "/build/cmake/image/activate_packages.cmake"
            }
          ]
        },
        {
          "id": "8.2",
          "name": "Create Test Infrastructure",
          "type": "implementation",
          "priority": "high",
          "components": [
            {
              "name": "unit_tests",
              "path": "/src/tests",
              "framework": "CTest"
            },
            {
              "name": "integration_tests",
              "script": "/build/cmake/tests/integration_tests.cmake"
            },
            {
              "name": "validation_suite",
              "script": "/build/cmake/validation/validate_build.py",
              "checks": [
                "binary_comparison",
                "symbol_verification",
                "package_contents",
                "boot_test"
              ]
            }
          ]
        },
        {
          "id": "8.3",
          "name": "CI/CD Integration",
          "type": "implementation",
          "priority": "high",
          "components": [
            {
              "name": "github_actions",
              "path": "/.github/workflows/cmake_build.yml"
            },
            {
              "name": "buildbot_config",
              "path": "/build/cmake/ci/buildbot.cfg"
            },
            {
              "name": "nightly_builds",
              "script": "/build/cmake/ci/nightly_build.sh"
            }
          ]
        }
      ]
    },
    {
      "id": "phase_9",
      "name": "Documentation and Finalization",
      "duration_days": 7,
      "tasks": [
        {
          "id": "9.1",
          "name": "Create Documentation",
          "type": "documentation",
          "priority": "high",
          "documents": [
            {
              "name": "build_guide",
              "path": "/docs/develop/build/cmake/README.md"
            },
            {
              "name": "migration_guide",
              "path": "/docs/develop/build/cmake/migration_from_jam.md"
            },
            {
              "name": "developer_guide",
              "path": "/docs/develop/build/cmake/developer_guide.md"
            },
            {
              "name": "api_reference",
              "path": "/docs/develop/build/cmake/cmake_api.md"
            }
          ]
        },
        {
          "id": "9.2",
          "name": "IDE Integration",
          "type": "implementation",
          "priority": "medium",
          "ide_configs": [
            {
              "ide": "vscode",
              "path": "/.vscode/",
              "files": ["settings.json", "tasks.json", "launch.json", "c_cpp_properties.json"]
            },
            {
              "ide": "clion",
              "path": "/.idea/",
              "files": ["cmake.xml", "configurations.xml"]
            },
            {
              "ide": "qtcreator",
              "path": "/",
              "files": ["CMakeLists.txt.user"]
            }
          ]
        },
        {
          "id": "9.3",
          "name": "Performance Optimization",
          "type": "optimization",
          "priority": "medium",
          "optimizations": [
            {
              "name": "ccache_integration",
              "config": "/build/cmake/optimization/ccache.cmake"
            },
            {
              "name": "unity_builds",
              "config": "/build/cmake/optimization/unity_builds.cmake"
            },
            {
              "name": "precompiled_headers",
              "config": "/build/cmake/optimization/pch.cmake"
            },
            {
              "name": "link_time_optimization",
              "config": "/build/cmake/optimization/lto.cmake"
            }
          ]
        }
      ]
    }
  ],
  "validation": {
    "checkpoints": [
      {
        "phase": 3,
        "name": "Core System Validation",
        "tests": ["kernel_boot", "libroot_symbols", "runtime_loader_test"]
      },
      {
        "phase": 5,
        "name": "Driver Validation",
        "tests": ["driver_loading", "filesystem_mount", "network_connectivity"]
      },
      {
        "phase": 7,
        "name": "Package System Validation",
        "tests": ["package_creation", "package_activation", "repository_sync"]
      },
      {
        "phase": 8,
        "name": "Full System Validation",
        "tests": ["boot_to_desktop", "application_launch", "complete_build_comparison"]
      }
    ]
  },
  "risk_matrix": {
    "critical_risks": [
      {
        "risk": "Kernel/libroot binary incompatibility",
        "probability": "Medium",
        "impact": "Critical",
        "mitigation": "Incremental migration with bit-by-bit validation"
      },
      {
        "risk": "Symbol versioning mismatch",
        "probability": "High",
        "impact": "Critical",
        "mitigation": "Custom linker scripts and exact version map generation"
      },
      {
        "risk": "PackageFS integration failure",
        "probability": "Medium",
        "impact": "Critical",
        "mitigation": "Extensive package format validation and dual-build testing"
      },
      {
        "risk": "HaikuPorts recipe incompatibility",
        "probability": "High",
        "impact": "High",
        "mitigation": "Recipe compatibility checker and gradual migration"
      }
    ],
    "medium_risks": [
      {
        "risk": "Driver conditional compilation errors",
        "probability": "Medium",
        "impact": "Medium",
        "mitigation": "Platform matrix validation and per-driver testing"
      },
      {
        "risk": "Resource compilation differences",
        "probability": "Low",
        "impact": "Medium",
        "mitigation": "RDEF validation and resource binary comparison"
      },
      {
        "risk": "Performance regression",
        "probability": "Low",
        "impact": "Medium",
        "mitigation": "Continuous benchmarking and optimization flags tuning"
      }
    ]
  },
  "critical_success_factors": {
    "must_have": [
      "100% ABI compatibility for core libraries",
      "Bit-identical kernel for same configuration",
      "Working package system with identical .hpkg format",
      "All platforms booting successfully",
      "No performance regression > 5%"
    ],
    "nice_to_have": [
      "Faster incremental builds",
      "Better IDE integration",
      "Cleaner build scripts",
      "Improved parallelization"
    ]
  },
  "final_validation_checklist": {
    "before_full_switch": [
      "□ All binaries pass exact comparison or have documented acceptable differences",
      "□ ABI compliance is 100% for all public libraries",
      "□ All platforms boot to desktop",
      "□ Package creation and activation works",
      "□ HaikuPorts can build packages with CMake-built Haiku",
      "□ Performance benchmarks within 5% tolerance",
      "□ Developer documentation complete",
      "□ CI/CD fully migrated",
      "□ 30-day soak test passed",
      "□ Community testing feedback addressed"
    ]
  }
},
  "automation_scripts": {
    "converter": {
      "name": "jam2cmake.py",
      "path": "/build/cmake/tools/jam2cmake.py",
      "usage": "python3 jam2cmake.py <jamfile> <output_cmake>",
      "features": [
        "rule_conversion",
        "dependency_mapping",
        "flag_translation",
        "resource_handling"
      ]
    },
    "validator": {
      "name": "validate_migration.py",
      "path": "/build/cmake/tools/validate_migration.py",
      "usage": "python3 validate_migration.py --compare-builds",
      "checks": [
        "file_presence",
        "symbol_table",
        "binary_size",
        "dependency_graph"
      ]
    },
    "batch_converter": {
      "name": "batch_convert.sh",
      "path": "/build/cmake/tools/batch_convert.sh",
      "usage": "./batch_convert.sh <directory>",
      "parallel": true
    }
  },
  "templates": {
    "application": "/build/cmake/templates/application.cmake",
    "library": "/build/cmake/templates/library.cmake",
    "driver": "/build/cmake/templates/driver.cmake",
    "addon": "/build/cmake/templates/addon.cmake",
    "server": "/build/cmake/templates/server.cmake",
    "test": "/build/cmake/templates/test.cmake",
    "rdef_handling": {
      "path": "/build/cmake/templates/rdef_handling.cmake",
      "example": [
        "# CMake function for RDEF compilation",
        "function(haiku_add_resource_def TARGET RDEF_FILE)",
        "    get_filename_component(RDEF_NAME ${RDEF_FILE} NAME_WE)",
        "    set(RSRC_FILE ${CMAKE_CURRENT_BINARY_DIR}/${RDEF_NAME}.rsrc)",
        "    ",
        "    # Find rc compiler",
        "    find_program(RC_COMPILER rc PATHS /bin /system/bin)",
        "    ",
        "    # Get include directories",
        "    set(RDEF_INCLUDES",
        "        -I${CMAKE_SOURCE_DIR}/headers/os",
        "        -I${CMAKE_SOURCE_DIR}/data/artwork/icons",
        "        -I${CMAKE_CURRENT_SOURCE_DIR}",
        "    )",
        "    ",
        "    # Add custom command for RDEF compilation",
        "    add_custom_command(",
        "        OUTPUT ${RSRC_FILE}",
        "        COMMAND ${RC_COMPILER}",
        "        ARGS ${RDEF_INCLUDES} -o ${RSRC_FILE} ${RDEF_FILE}",
        "        DEPENDS ${RDEF_FILE}",
        "        COMMENT \"Compiling resource ${RDEF_FILE}\"",
        "    )",
        "    ",
        "    # Add resource to target",
        "    target_sources(${TARGET} PRIVATE ${RSRC_FILE})",
        "    set_source_files_properties(${RSRC_FILE} PROPERTIES",
        "        EXTERNAL_OBJECT TRUE",
        "        GENERATED TRUE",
        "    )",
        "    ",
        "    # Add as POST_BUILD step to merge resources",
        "    add_custom_command(TARGET ${TARGET} POST_BUILD",
        "        COMMAND xres -o $<TARGET_FILE:${TARGET}> ${RSRC_FILE}",
        "        COMMENT \"Adding resources to ${TARGET}\"",
        "    )",
        "endfunction()",
        "",
        "# Function for HVIF icons",
        "function(haiku_add_vector_icon TARGET ICON_FILE)",
        "    get_filename_component(ICON_NAME ${ICON_FILE} NAME_WE)",
        "    set(ICON_RSRC ${CMAKE_CURRENT_BINARY_DIR}/${ICON_NAME}_icon.rsrc)",
        "    ",
        "    add_custom_command(",
        "        OUTPUT ${ICON_RSRC}",
        "        COMMAND resattr -O -o ${ICON_RSRC} ${ICON_FILE}",
        "        DEPENDS ${ICON_FILE}",
        "        COMMENT \"Converting vector icon ${ICON_FILE}\"",
        "    )",
        "    ",
        "    target_sources(${TARGET} PRIVATE ${ICON_RSRC})",
        "endfunction()",
        "",
        "# Complete application with resources",
        "function(haiku_application NAME)",
        "    add_executable(${NAME} ${ARGN})",
        "    ",
        "    # Find RDEF files",
        "    file(GLOB RDEF_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.rdef)",
        "    foreach(RDEF ${RDEF_FILES})",
        "        haiku_add_resource_def(${NAME} ${RDEF})",
        "    endforeach()",
        "    ",
        "    # Find HVIF icons",
        "    file(GLOB HVIF_ICONS ${CMAKE_CURRENT_SOURCE_DIR}/*.hvif)",
        "    foreach(ICON ${HVIF_ICONS})",
        "        haiku_add_vector_icon(${NAME} ${ICON})",
        "    endforeach()",
        "endfunction()"
      ]
    }
  },
  "rdef_examples": {
    "application_rdef": {
      "path": "/examples/Application.rdef",
      "content": [
        "resource app_signature \"application/x-vnd.Haiku-ExampleApp\";",
        "",
        "resource app_version {",
        "    major  = 1,",
        "    middle = 0,",
        "    minor  = 0,",
        "    variety = B_APPV_FINAL,",
        "    internal = 0,",
        "    short_info = \"ExampleApp\",",
        "    long_info = \"Example Haiku Application\"",
        "};",
        "",
        "resource app_flags B_SINGLE_LAUNCH | B_ARGV_ONLY;",
        "",
        "resource vector_icon {",
        "    $\"6E636966080501040046020106023E40000000000000003D4000494000470000\"",
        "    $\"00FFFFFFFFE5E1DA02000602000000BBC0004C0000000000009220244AF02D00\"",
        "};",
        "",
        "resource file_types message {",
        "    \"types\" = \"text/plain\",",
        "    \"types\" = \"text/x-source-code\"",
        "};"
      ]
    },
    "preference_rdef": {
      "path": "/examples/Preference.rdef",
      "content": [
        "resource app_signature \"application/x-vnd.Haiku-Preference\";",
        "resource app_flags B_SINGLE_LAUNCH;",
        "",
        "resource(1, \"BEOS:L:STD_ICON\") #'ICON' array {",
        "    /* 32x32 icon data */",
        "};",
        "",
        "resource mini_icon array {",
        "    /* 16x16 icon data */",
        "};"
      ]
    }
  },
  "buildtools_critical_aspects": {
    "description": "Critical aspects of buildtools that affect the entire build",
    "gcc_haiku_patches": {
      "description": "GCC patches specific to Haiku",
      "critical_files": [
        "gcc/gcc/config/haiku.h",
        "gcc/gcc/config/i386/haiku.h",
        "gcc/gcc/config/i386/haiku64.h",
        "gcc/gcc/config/arm/haiku.h",
        "gcc/gcc/config/riscv/haiku.h"
      ],
      "features": {
        "target_os": {
          "define": "__HAIKU__",
          "version": "__HAIKU_VERSION__"
        },
        "threading": {
          "model": "posix",
          "tls": "Haiku-specific TLS implementation"
        },
        "stack_protection": {
          "default": "-fstack-protector",
          "guard": "Haiku stack guard implementation"
        },
        "pic_pie": {
          "default_pic": true,
          "default_pie": true,
          "got_handling": "Haiku-specific"
        },
        "runtime_paths": {
          "dynamic_linker": "/system/runtime_loader",
          "system_libs": "/boot/system/lib",
          "develop_libs": "/boot/system/develop/lib"
        }
      },
      "validation": [
        "echo '__HAIKU__' | gcc -E -dM - | grep HAIKU",
        "gcc -dumpspecs | grep haiku",
        "gcc -print-search-dirs | grep /boot/system"
      ]
    },
    "binutils_haiku_patches": {
      "description": "Binutils patches for Haiku ELF format",
      "critical_files": [
        "binutils/bfd/config.bfd",
        "binutils/ld/emulparams/elf_x86_64_haiku.sh",
        "binutils/ld/emulparams/elf_i386_haiku.sh",
        "binutils/ld/emulparams/armelf_haiku.sh",
        "binutils/ld/emulparams/riscv64elf_haiku.sh"
      ],
      "features": {
        "elf_format": {
          "os_abi": "ELFOSABI_HAIKU (0x10)",
          "machine_types": ["EM_X86_64", "EM_386", "EM_ARM", "EM_RISCV"],
          "interpreter": "/system/runtime_loader"
        },
        "linking": {
          "default_text_addr": "0x200000",
          "shared_lib_search": ["/boot/system/lib", "/boot/home/config/lib"],
          "rpath_handling": "Haiku-specific RPATH/RUNPATH"
        },
        "symbols": {
          "versioning": "GNU-style with Haiku extensions",
          "weak_symbols": "Haiku weak symbol handling",
          "hidden_visibility": "Proper hidden symbol support"
        }
      },
      "validation": [
        "ld --help | grep haiku",
        "readelf -h binary | grep 'OS/ABI.*Haiku'",
        "objdump -x binary | grep RUNPATH"
      ]
    },
    "build_order": {
      "description": "Critical build order when using buildtools",
      "stages": [
        {
          "stage": "1_host_tools",
          "description": "Build tools that run on host",
          "tools": ["jam", "rc", "mimeset", "package"],
          "compiler": "host compiler (not buildtools)"
        },
        {
          "stage": "2_buildtools",
          "description": "Build cross-compiler",
          "components": ["binutils", "gcc", "runtime libs"],
          "note": "Must complete before any target code"
        },
        {
          "stage": "3_headers",
          "description": "Install Haiku headers for cross-compilation",
          "source": "/headers/",
          "destination": "${CROSS_TOOLS}/sysroot/boot/system/develop/headers"
        },
        {
          "stage": "4_libroot_stubs",
          "description": "Build minimal libroot for linking",
          "purpose": "Allow gcc to link during bootstrap"
        },
        {
          "stage": "5_full_system",
          "description": "Build complete Haiku with cross-tools",
          "uses": "buildtools gcc/binutils"
        }
      ]
    },
    "cmake_integration": {
      "description": "How to integrate buildtools with CMake",
      "toolchain_file_requirements": [
        "Set CMAKE_C_COMPILER to buildtools gcc",
        "Set CMAKE_CXX_COMPILER to buildtools g++",
        "Set CMAKE_AR to buildtools ar",
        "Set CMAKE_LINKER to buildtools ld",
        "Add Haiku-specific flags from gcc specs",
        "Set proper sysroot for headers/libs"
      ],
      "example_usage": [
        "# Build buildtools first",
        "cd buildtools",
        "./configure --cross-tools-source . \\",
        "    --build-cross-tools x86_64 \\",
        "    --cross-tools-prefix /path/to/cross-tools",
        "make -j8",
        "",
        "# Use in CMake",
        "cd haiku",
        "cmake -B build \\",
        "    -DCMAKE_TOOLCHAIN_FILE=build/cmake/toolchains/haiku_cross.cmake \\",
        "    -DBUILDTOOLS_PREFIX=/path/to/cross-tools \\",
        "    -DHAIKU_ARCH=x86_64",
        "cmake --build build"
      ]
    },
    "risks_and_mitigations": {
      "risks": [
        {
          "risk": "Buildtools patches not applied correctly",
          "impact": "Critical - build will fail or produce wrong binaries",
          "mitigation": "Validate patches with test programs"
        },
        {
          "risk": "CMake doesn't use buildtools compiler",
          "impact": "High - wrong ABI or missing features",
          "mitigation": "Explicit toolchain file validation"
        },
        {
          "risk": "Host tools mixed with target tools",
          "impact": "Medium - build confusion",
          "mitigation": "Separate build directories and explicit paths"
        }
      ],
      "validation_checklist": [
        "□ GCC reports __HAIKU__ defined",
        "□ Binutils generates ELFOSABI_HAIKU",
        "□ Dynamic linker path is /system/runtime_loader",
        "□ RPATH points to /boot/system/lib",
        "□ Cross-compilation produces valid Haiku ELF"
      ]
    }
  },
    "description": "Device Tree handling for ARM64 and RISC-V",
    "arm64": {
      "dts_directory": "/data/dts/arm64/",
      "dtb_output": "/build/arm64/dtb/",
      "cmake_implementation": {
        "module": "/build/cmake/modules/DeviceTree.cmake",
        "functions": [
          "compile_device_tree()",
          "embed_dtb_in_kernel()",
          "validate_dtb()"
        ],
        "example": [
          "# Device Tree compilation for ARM64",
          "find_program(DTC dtc REQUIRED)",
          "",
          "function(compile_device_tree DTS_FILE)",
          "    get_filename_component(DTS_NAME ${DTS_FILE} NAME_WE)",
          "    set(DTB_FILE ${CMAKE_BINARY_DIR}/dtb/${DTS_NAME}.dtb)",
          "    ",
          "    add_custom_command(",
          "        OUTPUT ${DTB_FILE}",
          "        COMMAND ${DTC}",
          "        ARGS -O dtb -o ${DTB_FILE} ${DTS_FILE}",
          "            -I dts -O dtb",
          "            -i ${CMAKE_SOURCE_DIR}/data/dts/include",
          "        DEPENDS ${DTS_FILE}",
          "        COMMENT \"Compiling Device Tree ${DTS_FILE}\"",
          "    )",
          "    ",
          "    set_source_files_properties(${DTB_FILE} PROPERTIES",
          "        GENERATED TRUE",
          "    )",
          "    ",
          "    return(${DTB_FILE})",
          "endfunction()",
          "",
          "# Embed DTB in kernel image",
          "function(embed_dtb_in_kernel KERNEL_TARGET DTB_FILE)",
          "    add_custom_command(TARGET ${KERNEL_TARGET} POST_BUILD",
          "        COMMAND ${CMAKE_OBJCOPY}",
          "        ARGS --add-section .dtb=${DTB_FILE}",
          "            --set-section-flags .dtb=contents,alloc,load,readonly,data",
          "            $<TARGET_FILE:${KERNEL_TARGET}>",
          "        COMMENT \"Embedding DTB into kernel\"",
          "    )",
          "endfunction()"
        ]
      },
      "boards": [
        "raspberry_pi_4",
        "pine64",
        "rockpro64",
        "nvidia_jetson",
        "qemu_virt"
      ]
    },
    "riscv": {
      "dts_directory": "/data/dts/riscv/",
      "opensbi_integration": {
        "path": "/src/system/boot/platform/riscv/opensbi/",
        "fw_payload": true,
        "fw_jump": false,
        "cmake_config": [
          "# OpenSBI firmware integration",
          "ExternalProject_Add(opensbi",
          "    SOURCE_DIR ${CMAKE_SOURCE_DIR}/src/system/boot/platform/riscv/opensbi",
          "    CMAKE_ARGS",
          "        -DPLATFORM=generic",
          "        -DCROSS_COMPILE=${RISCV_CROSS_COMPILE}",
          "        -DFW_PAYLOAD_PATH=$<TARGET_FILE:haiku_kernel>",
          "    BUILD_COMMAND make",
          "    INSTALL_COMMAND \"\"",
          ")"
        ]
      },
      "boards": [
        "sifive_hifive_unmatched",
        "starfive_visionfive2",
        "qemu_virt",
        "allwinner_d1"
      ]
    },
    "validation": {
      "dtb_checker": "/build/cmake/tools/validate_dtb.py",
      "required_nodes": [
        "/cpus",
        "/memory",
        "/chosen",
        "/soc"
      ],
      "boot_test": "QEMU with generated DTB"
    }
  },
    "description": "Comprehensive RDEF and resource handling patterns",
    "rc_compiler": {
      "path": "/bin/rc",
      "build_from_source": "/src/bin/rc",
      "dependencies": ["libstdc++", "libroot"]
    },
    "xres_tool": {
      "path": "/bin/xres",
      "purpose": "Add resources to compiled binaries",
      "usage": "xres -o <binary> <resource_file.rsrc>"
    },
    "resattr_tool": {
      "path": "/bin/resattr",
      "purpose": "Manipulate resource attributes",
      "usage": "resattr -O -o <output> <input>"
    },
    "common_patterns": {
      "application_signature": {
        "format": "application/x-vnd.[Vendor]-[AppName]",
        "examples": [
          "application/x-vnd.Haiku-Terminal",
          "application/x-vnd.Be-TRAK"
        ]
      },
      "version_info": {
        "fields": ["major", "middle", "minor", "variety", "internal"],
        "variety_values": ["B_APPV_DEVELOPMENT", "B_APPV_ALPHA", "B_APPV_BETA", "B_APPV_GAMMA", "B_APPV_GOLDEN_MASTER", "B_APPV_FINAL"]
      },
      "app_flags": {
        "values": [
          "B_SINGLE_LAUNCH",
          "B_MULTIPLE_LAUNCH",
          "B_EXCLUSIVE_LAUNCH",
          "B_BACKGROUND_APP",
          "B_ARGV_ONLY"
        ]
      },
      "icon_types": {
        "vector": {
          "format": "HVIF",
          "tool": "Icon-O-Matic",
          "resource_type": "vector_icon"
        },
        "bitmap_large": {
          "size": "32x32",
          "resource_type": "large_icon"
        },
        "bitmap_mini": {
          "size": "16x16",
          "resource_type": "mini_icon"
        }
      }
    },
    "cmake_integration": {
      "find_rc_compiler": [
        "find_program(RC_COMPILER rc",
        "    PATHS /bin /system/bin ${HAIKU_TOOLS_DIR}",
        "    REQUIRED",
        ")"
      ],
      "rdef_include_dirs": [
        "${CMAKE_SOURCE_DIR}/headers/os",
        "${CMAKE_SOURCE_DIR}/data/artwork/icons",
        "${CMAKE_SOURCE_DIR}/data/catalogs",
        "${CMAKE_CURRENT_SOURCE_DIR}"
      ],
      "dependency_tracking": {
        "description": "Track RDEF dependencies for incremental builds",
        "implementation": [
          "CONFIGURE_DEPENDS for GLOB patterns",
          "DEPFILE support for custom commands",
          "Proper DEPENDS in add_custom_command"
        ]
      }
    },
    "localization_resources": {
      "catalog_path": "/data/catalogs",
      "languages": ["en", "de", "fr", "ja", "es", "ru", "pt", "it", "zh", "nl", "pl", "sv"],
      "catalog_compilation": {
        "tool": "linkcatkeys",
        "input": "*.catkeys",
        "output": "*.catalog"
      }
    },
    "special_cases": {
      "kernel_resources": {
        "description": "Kernel doesn't use standard resources",
        "handling": "Embedded at link time"
      },
      "driver_resources": {
        "description": "Drivers use simplified resources",
        "attributes": ["driver_signature", "driver_version"]
      },
      "addon_resources": {
        "description": "Add-ons need specific metadata",
        "required": ["addon_signature", "addon_version", "supported_types"]
      },
      "translator_resources": {
        "description": "Translators need format information",
        "required": ["translator_info", "input_formats", "output_formats"]
      }
    },
    "validation": {
      "signature_uniqueness": {
        "script": "/build/cmake/tools/check_signatures.py",
        "registry": "/build/cmake/migration/signature_registry.json"
      },
      "resource_completeness": {
        "required_fields": ["app_signature", "app_version"],
        "recommended_fields": ["app_flags", "vector_icon", "file_types"]
      },
      "icon_validation": {
        "check_hvif": "Validate HVIF format",
        "check_sizes": "Ensure all required icon sizes",
        "optimize": "Optimize vector paths"
      }
    }
  },
    "build_time_improvement": "40-50%",
    "incremental_build_improvement": "60%",
    "parallel_build_efficiency": "85%",
    "ide_integration_score": "95%",
    "developer_satisfaction": "target: 8/10"
  },
  "rollback_plan": {
    "enabled": true,
    "dual_build_period": "60 days",
    "validation_required": true,
    "fallback_to_jam": "automatic on critical failure",
    "granular_rollback": {
      "description": "Component-level rollback capability",
      "levels": [
        {
          "component": "kernel",
          "can_rollback": true,
          "isolation": "Complete - can use Jam kernel with CMake userland"
        },
        {
          "component": "libroot",
          "can_rollback": true,
          "isolation": "Requires runtime_loader compatibility check"
        },
        {
          "component": "drivers",
          "can_rollback": true,
          "isolation": "Per-driver rollback possible"
        },
        {
          "component": "applications",
          "can_rollback": true,
          "isolation": "Per-application rollback"
        }
      ]
    },
    "rollback_triggers": [
      "Binary size difference > 10%",
      "Missing symbols in core libraries",
      "ABI compatibility < 100%",
      "Boot failure on any supported platform",
      "Package creation failure",
      "Performance regression > 5%"
    ],
    "rollback_procedure": [
      "Stop CMake build",
      "Restore Jam build artifacts",
      "Document failure reason",
      "Create fix plan",
      "Test fix in isolation",
      "Retry migration"
    ]
  },
  "example_cmakelists": {
    "description": "Complete example of CMakeLists.txt with RDEF handling",
    "path": "/examples/CMakeLists_with_rdef.txt",
    "content": [
      "# Example CMakeLists.txt for Haiku application with RDEF resources",
      "cmake_minimum_required(VERSION 3.16)",
      "",
      "# Include Haiku modules",
      "include(${CMAKE_SOURCE_DIR}/build/cmake/modules/HaikuCommon.cmake)",
      "include(${CMAKE_SOURCE_DIR}/build/cmake/modules/HaikuResources.cmake)",
      "",
      "# Define the application",
      "set(APP_NAME Terminal)",
      "set(APP_SIGNATURE \"application/x-vnd.Haiku-Terminal\")",
      "",
      "# Source files",
      "set(SOURCES",
      "    AppearPrefView.cpp",
      "    Arguments.cpp",
      "    BasicTerminalBuffer.cpp",
      "    Colors.cpp",
      "    FindWindow.cpp",
      "    Globals.cpp",
      "    HistoryBuffer.cpp",
      "    HyperLink.cpp",
      "    KeyBoardLayoutView.cpp",
      "    PrefHandler.cpp",
      "    PrefWindow.cpp",
      "    SetTitleDialog.cpp",
      "    Shell.cpp",
      "    ShellParameters.cpp",
      "    SmartTabView.cpp",
      "    TermApp.cpp",
      "    TermBuffer.cpp",
      "    TermConst.cpp",
      "    TermParse.cpp",
      "    TermScrollView.cpp",
      "    TermView.cpp",
      "    TermViewStates.cpp",
      "    TermWindow.cpp",
      "    TitlePlaceholderMapper.cpp",
      ")",
      "",
      "# Create executable",
      "add_executable(${APP_NAME} ${SOURCES})",
      "",
      "# Compile RDEF file",
      "haiku_add_resource_def(${APP_NAME}",
      "    ${CMAKE_CURRENT_SOURCE_DIR}/Terminal.rdef",
      ")",
      "",
      "# Add vector icon",
      "haiku_add_vector_icon(${APP_NAME}",
      "    ${CMAKE_CURRENT_SOURCE_DIR}/icons/terminal_icon.hvif",
      ")",
      "",
      "# Add additional resources",
      "haiku_add_resource_file(${APP_NAME}",
      "    ${CMAKE_CURRENT_SOURCE_DIR}/resources/keymaps.rsrc",
      ")",
      "",
      "# Set MIME signature",
      "haiku_set_mime_signature(${APP_NAME} ${APP_SIGNATURE})",
      "",
      "# Add localization catalogs",
      "haiku_add_localization_catalog(${APP_NAME}",
      "    LANGUAGES en de fr ja es",
      "    CATALOG_DIR ${CMAKE_SOURCE_DIR}/data/catalogs/apps/terminal",
      ")",
      "",
      "# Link libraries",
      "target_link_libraries(${APP_NAME}",
      "    PRIVATE",
      "        be",
      "        tracker",
      "        translation",
      "        ncurses",
      ")",
      "",
      "# Set include directories",
      "target_include_directories(${APP_NAME}",
      "    PRIVATE",
      "        ${CMAKE_CURRENT_SOURCE_DIR}",
      "        ${CMAKE_SOURCE_DIR}/headers/private/interface",
      ")",
      "",
      "# Install target",
      "install(TARGETS ${APP_NAME}",
      "    RUNTIME DESTINATION /boot/system/apps",
      ")",
      "",
      "# Post-build resource validation",
      "add_custom_command(TARGET ${APP_NAME} POST_BUILD",
      "    COMMAND ${CMAKE_SOURCE_DIR}/build/cmake/tools/validate_resources.py",
      "        $<TARGET_FILE:${APP_NAME}>",
      "    COMMENT \"Validating resources for ${APP_NAME}\"",
      ")"
    ]
  }
