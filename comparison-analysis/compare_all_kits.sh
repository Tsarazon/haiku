#!/bin/bash
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Haiku
"""

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'  
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMPARE_SCRIPT="$SCRIPT_DIR/compare_builds.py"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
if [[ ! -f "$COMPARE_SCRIPT" ]]; then
    echo -e "${RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω compare_builds.py –≤ $SCRIPT_DIR${NC}"
    exit 1
fi

# –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
declare -a COMPONENTS=(
    "interface_kit */interface/interface_kit.o hsl,rgb,color,gradient"
    "storage_kit */storage/storage_kit.o mime,file,directory,volume"
    "support_kit */support/support_kit.o string,list,locker,archivable"
    "app_kit */app/app_kit.o application,window,message,handler"
    "locale_kit */locale/locale_kit.o locale,catalog,collator,formatter"
)

# –û–ø—Ü–∏–∏
VERBOSE=false
OUTPUT_DIR=""
JSON_OUTPUT=false

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -o|--output-dir)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        --json)
            JSON_OUTPUT=true
            shift
            ;;
        -h|--help)
            cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
    -v, --verbose       –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    -o, --output-dir    –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
    --json              –°–æ–∑–¥–∞—Ç—å —Ç–∞–∫–∂–µ JSON —Ñ–∞–π–ª—ã
    -h, --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
    $0                                    # –ë–∞–∑–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    $0 -v -o reports --json              # –ü–æ–¥—Ä–æ–±–Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—á–µ—Ç–æ–≤
EOF
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1${NC}"
            exit 1
            ;;
    esac
done

# –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [[ -n "$OUTPUT_DIR" ]]; then
    mkdir -p "$OUTPUT_DIR"
    echo -e "${BLUE}üìÅ –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $OUTPUT_DIR${NC}"
fi

echo -e "${BLUE}üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ Haiku –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...${NC}"
echo

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
TOTAL_COMPONENTS=${#COMPONENTS[@]}
SUCCESS_COUNT=0
WARNING_COUNT=0
ERROR_COUNT=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_result() {
    local component="$1"
    local status="$2"  # success, warning, error
    local message="$3"
    
    case $status in
        success)
            echo -e "${GREEN}‚úÖ $component: $message${NC}"
            ((SUCCESS_COUNT++))
            ;;
        warning)
            echo -e "${YELLOW}‚ö†Ô∏è  $component: $message${NC}"
            ((WARNING_COUNT++))
            ;;
        error)
            echo -e "${RED}‚ùå $component: $message${NC}"
            ((ERROR_COUNT++))
            ;;
    esac
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
for component_info in "${COMPONENTS[@]}"; do
    # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    IFS=' ' read -r component_name pattern search_symbols <<< "$component_info"
    
    echo -e "${BLUE}üîÑ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º $component_name...${NC}"
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args=("$component_name" "$pattern")
    
    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–æ–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if [[ -n "$search_symbols" ]]; then
        IFS=',' read -ra SYMBOLS <<< "$search_symbols"
        args+=(--search-symbols "${SYMBOLS[@]}")
    fi
    
    # –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [[ -n "$OUTPUT_DIR" ]]; then
        output_file="$OUTPUT_DIR/${component_name}_comparison.md"
        args+=(--output "$output_file")
    fi
    
    # –î–æ–±–∞–≤–∏—Ç—å JSON –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [[ "$JSON_OUTPUT" == "true" ]]; then
        args+=(--json)
    fi
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if [[ "$VERBOSE" == "true" ]]; then
        echo -e "${BLUE}   –ö–æ–º–∞–Ω–¥–∞: python3 $COMPARE_SCRIPT ${args[*]}${NC}"
    fi
    
    if output=$(python3 "$COMPARE_SCRIPT" "${args[@]}" 2>&1); then
        exit_code=$?
        
        if [[ $exit_code -eq 0 ]]; then
            if echo "$output" | grep -q "PERFECT MATCH"; then
                log_result "$component_name" "success" "–ò–¥–µ–∞–ª—å–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            else
                log_result "$component_name" "success" "–û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏"
            fi
        else
            log_result "$component_name" "warning" "–ï—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è"
        fi
        
        if [[ "$VERBOSE" == "true" ]]; then
            echo "$output" | tail -5 | sed 's/^/   /'
        fi
    else
        log_result "$component_name" "error" "–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
        if [[ "$VERBOSE" == "true" ]]; then
            echo "$output" | tail -3 | sed 's/^/   /' 
        fi
    fi
    
    echo
done

# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
echo -e "${BLUE}üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${NC}"
echo -e "   –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: $TOTAL_COMPONENTS"
echo -e "   ${GREEN}–£—Å–ø–µ—à–Ω–æ: $SUCCESS_COUNT${NC}"
echo -e "   ${YELLOW}–° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: $WARNING_COUNT${NC}" 
echo -e "   ${RED}–° –æ—à–∏–±–∫–∞–º–∏: $ERROR_COUNT${NC}"
echo

# –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
if [[ $ERROR_COUNT -eq 0 ]] && [[ $WARNING_COUNT -eq 0 ]]; then
    echo -e "${GREEN}üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ò–î–ï–ê–õ–¨–ù–û –°–û–í–ü–ê–î–ê–Æ–¢!${NC}"
    exit 0
elif [[ $ERROR_COUNT -eq 0 ]]; then
    echo -e "${YELLOW}‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è, –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è.${NC}"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è  –ï—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞.${NC}"
    exit 1
fi